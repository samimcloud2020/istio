----------------------The Kubernetes network model--------------------------------------------------------
Every Pod in a cluster gets its own unique cluster-wide IP address.

This means you do not need to explicitly create links between Pods and you almost never need to deal with mapping container ports to host ports.
---------------------------------------------------------------------------------------------------------------------------------
Kubernetes imposes the following fundamental requirements on any networking implementation (barring any intentional network segmentation policies):

pods can communicate with all other pods on any other node without NAT
agents on a node (e.g. system daemons, kubelet) can communicate with all pods on that node.

------------------------------------------------------------------------------------------------------------------------------------------
---------------------Kubernetes networking addresses four concerns:-----------------------------------------------------------------------

Containers within a Pod use networking to communicate via loopback.

Cluster networking provides communication between different Pods.

The Service API lets you expose an application running in Pods to be reachable from outside your cluster.

Ingress provides extra functionality specifically for exposing HTTP applications, websites and APIs.

You can also use Services to publish services only for consumption inside your cluster.
--------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------Service------------------------------------------------------------------------------------------
Expose an application running in your cluster behind a single outward-facing endpoint, even when the workload is split across multiple backends.

--------------------------------------------Ingress-------------------------------------------------------------------------------
Make your HTTP (or HTTPS) network service available using a protocol-aware configuration mechanism, that understands web concepts 
like URIs, hostnames, paths, and more. 

The Ingress concept lets you map traffic to different backends based on rules you define via the Kubernetes API.

-----------------------------------------Ingress Controllers------------------------------------------------------------------------------
In order for an Ingress to work in your cluster, there must be an ingress controller running. You need to select at least one ingress controller and
make sure it is set up in your cluster. This page lists common ingress controllers that you can deploy.

-----------------------------------------DNS for Services and Pods--------------------------------------------------------------------------
Your workload can discover Services within your cluster using DNS; this page explains how that works.

-------------------------------------------IPv4/IPv6 dual-stack----------------------------------------------------------------------------
Kubernetes lets you configure single-stack IPv4 networking, single-stack IPv6 networking, or dual stack networking with both network families active. -

------------------------------------------Topology Aware Routing-------------------------------------------------------------------------------
Topology Aware Routing provides a mechanism to help keep network traffic within the zone where it originated.

Preferring same-zone traffic between Pods in your cluster can help with reliability, performance (network latency and throughput), or cost.


