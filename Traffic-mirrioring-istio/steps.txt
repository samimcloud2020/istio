-----------------Traffic Mirrioring------------------------------------------------------------------------------------------------
Traffic mirroring, also called shadowing, is a powerful concept that allows feature teams to bring changes to production with as little risk as possible.
Mirroring sends a copy of live traffic to a mirrored service. The mirrored traffic happens out of band of the critical request path for the primary service.

In this task, you will first force all traffic to v1 of a test service. Then, you will apply a rule to mirror a portion of traffic to v2.

-------------------------------------------------------------------------------------------------------------------------------------------
samim@ip-172-31-27-156:~$ cd istio-1.18.1

samim@ip-172-31-27-156:~/istio-1.18.1$ export PATH=$PWD/bin:$PATH

samim@ip-172-31-27-156:~/istio-1.18.1$ minikube start --cpus 4 --memory 6000
* minikube v1.30.1 on Ubuntu 22.04
* Automatically selected the docker driver
* Using Docker driver with root privileges
* Starting control plane node minikube in cluster minikube
* Pulling base image ...
* Creating docker container (CPUs=4, Memory=6000MB) ...
* Preparing Kubernetes v1.26.3 on Docker 23.0.2 ...
  - Generating certificates and keys ...
  - Booting up control plane ...
  - Configuring RBAC rules ...
* Configuring bridge CNI (Container Networking Interface) ...
  - Using image gcr.io/k8s-minikube/storage-provisioner:v5
* Verifying Kubernetes components...
* Enabled addons: storage-provisioner, default-storageclass
* Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default


samim@ip-172-31-27-156:~/istio-1.18.1$ istioctl install --set profile=demo  -y
✔ Istio core installed                                                                                                                                                      
✔ Istiod installed                                                                                                                                                          
✔ Egress gateways installed                                                                                                                                                 
✔ Ingress gateways installed                                                                                                                                                
✔ Installation complete                                                                                                                                                     Making this installation the default for injection and validation.

samim@ip-172-31-27-156:~/istio-1.18.1$ alias k=kubectl


samim@ip-172-31-27-156:~/istio-1.18.1$ k get po -n istio-system
NAME                                    READY   STATUS    RESTARTS   AGE
istio-egressgateway-c7df4695c-5lbpm     1/1     Running   0          31s
istio-ingressgateway-65bc5d57f9-75t9g   1/1     Running   0          31s
istiod-dd8fd669c-vb6j4                  1/1     Running   0          37s


----Start by deploying two versions of the httpbin service that have access logging enabled:httpbin-v1:--------------------------------

samim@ip-172-31-27-156:~/istio-1.18.1$ cat  deploy-v1.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin-v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpbin
      version: v1
  template:
    metadata:
      labels:
        app: httpbin
        version: v1
    spec:
      containers:
      - image: docker.io/kennethreitz/httpbin
        imagePullPolicy: IfNotPresent
        name: httpbin
        command: ["gunicorn", "--access-logfile", "-", "-b", "0.0.0.0:80", "httpbin:app"]
        ports:
        - containerPort: 80

samim@ip-172-31-27-156:~/istio-1.18.1$ k apply -f deploy-v1.yaml
deployment.apps/httpbin-v1 created

-------------------------httpbin-v2:--------------------------------------------------------------------------------
samim@ip-172-31-27-156:~/istio-1.18.1$ cat  deploy-v2.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin-v2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpbin
      version: v2
  template:
    metadata:
      labels:
        app: httpbin
        version: v2
    spec:
      containers:
      - image: docker.io/kennethreitz/httpbin
        imagePullPolicy: IfNotPresent
        name: httpbin
        command: ["gunicorn", "--access-logfile", "-", "-b", "0.0.0.0:80", "httpbin:app"]
        ports:
        - containerPort: 80

samim@ip-172-31-27-156:~/istio-1.18.1$ k apply -f   deploy-v2.yaml
deployment.apps/httpbin-v2 created

--------------httpbin Kubernetes service:---------------------------------------------------------------------
samim@ip-172-31-27-156:~/istio-1.18.1$ cat  service.yaml
apiVersion: v1
kind: Service
metadata:
  name: httpbin
  labels:
    app: httpbin
spec:
  ports:
  - name: http
    port: 8000
    targetPort: 80
  selector:
    app: httpbin

samim@ip-172-31-27-156:~/istio-1.18.1$ k apply -f   service.yaml
service/httpbin created
---------------------------Start the sleep service so you can use curl to provide load:sleep service:-----------------------------------------------
samim@ip-172-31-27-156:~/istio-1.18.1$ cat sleep-service.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sleep
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sleep
  template:
    metadata:
      labels:
        app: sleep
    spec:
      containers:
      - name: sleep
        image: curlimages/curl
        command: ["/bin/sleep","3650d"]
        imagePullPolicy: IfNotPresent

samim@ip-172-31-27-156:~/istio-1.18.1$ k apply -f  sleep-service.yaml
deployment.apps/sleep created
-----------------------------Creating a default routing policy-----------------------------------------------------------------------------------
By default Kubernetes load balances across both versions of the httpbin service. In this step, you will change that behavior so that all traffic goes to v1.

--------Create a default route rule to route all traffic to v1 of the service:----------------------------------------------------------------------------
samim@ip-172-31-27-156:~/istio-1.18.1$ cat  vs-100-percent-v1-ds.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: httpbin
spec:
  hosts:
    - httpbin
  http:
  - route:
    - destination:
        host: httpbin
        subset: v1
      weight: 100
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: httpbin
spec:
  host: httpbin
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2

samim@ip-172-31-27-156:~/istio-1.18.1$ k apply -f   vs-100-percent-v1-ds.yaml
virtualservice.networking.istio.io/httpbin created
destinationrule.networking.istio.io/httpbin created
--------------Now, with all traffic directed to httpbin:v1, send a request to the service:----------------------------------------------------
samim@ip-172-31-27-156:~/istio-1.18.1$ export SLEEP_POD=$(kubectl get pod -l app=sleep -o jsonpath={.items..metadata.name})
samim@ip-172-31-27-156:~/istio-1.18.1$ kubectl exec "${SLEEP_POD}" -c sleep -- curl -sS http://httpbin:8000/headers
{
  "headers": {
    "Accept": "*/*", 
    "Host": "httpbin:8000", 
    "User-Agent": "curl/8.1.2"
  }
}
-----------------Check the logs for v1 and v2 of the httpbin pods. You should see access log entries for v1 and none for v2:----------------------
samim@ip-172-31-27-156:~/istio-1.18.1$ export V1_POD=$(kubectl get pod -l app=httpbin,version=v1 -o jsonpath={.items..metadata.name})
samim@ip-172-31-27-156:~/istio-1.18.1$ kubectl logs "$V1_POD" -c httpbin
[2023-07-17 03:28:29 +0000] [1] [INFO] Starting gunicorn 19.9.0
[2023-07-17 03:28:29 +0000] [1] [INFO] Listening at: http://0.0.0.0:80 (1)
[2023-07-17 03:28:29 +0000] [1] [INFO] Using worker: sync
[2023-07-17 03:28:29 +0000] [9] [INFO] Booting worker with pid: 9
10.244.0.8 - - [17/Jul/2023:03:35:59 +0000] "GET /headers HTTP/1.1" 200 105 "-" "curl/8.1.2"  <-----200 ok, traffic to v1




samim@ip-172-31-27-156:~/istio-1.18.1$ export V2_POD=$(kubectl get pod -l app=httpbin,version=v2 -o jsonpath={.items..metadata.name})
samim@ip-172-31-27-156:~/istio-1.18.1$ kubectl logs "$V2_POD" -c httpbin   <------not 200 ok seen, means no traffic to v2
[2023-07-17 03:30:14 +0000] [1] [INFO] Starting gunicorn 19.9.0
[2023-07-17 03:30:14 +0000] [1] [INFO] Listening at: http://0.0.0.0:80 (1)
[2023-07-17 03:30:14 +0000] [1] [INFO] Using worker: sync
[2023-07-17 03:30:14 +0000] [9] [INFO] Booting worker with pid: 9


---------------------------------Mirroring traffic to v2-----------------------------------------------------------------------------
------------------------Change the route rule to mirror traffic to v2:--------------------------------------------------------------
samim@ip-172-31-27-156:~/istio-1.18.1$ cat vs-100-percent-to-v2.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: httpbin
spec:
  hosts:
    - httpbin
  http:
  - route:
    - destination:
        host: httpbin
        subset: v1       #This route rule sends 100% of the traffic to v1 and also to mirrior to v2.
      weight: 100
    mirror:              # mirrior means also send) 100% of the same traffic to the httpbin:v2 service.
      host: httpbin
      subset: v2
    mirrorPercentage:
      value: 100.0     # as per need change v2 traffic percent

samim@ip-172-31-27-156:~/istio-1.18.1$ k apply -f  vs-100-percent-to-v2.yaml
virtualservice.networking.istio.io/httpbin configured

This route rule sends 100% of the traffic to v1. The last stanza specifies that you want to mirror (i.e., also send) 100% of the same traffic to 
the httpbin:v2 service. When traffic gets mirrored, the requests are sent to the mirrored service with their Host/Authority headers appended with -shadow.
For example, cluster-1 becomes cluster-1-shadow.

Also, it is important to note that these requests are mirrored as “fire and forget”, which means that the responses are discarded.

You can use the value field under the mirrorPercentage field to mirror a fraction of the traffic, instead of mirroring all requests. 
If this field is absent, all traffic will be mirrored.


--------------------------------Send in traffic:----------------------------------------------------------------------------------------
samim@ip-172-31-27-156:~/istio-1.18.1$ kubectl exec "${SLEEP_POD}" -c sleep -- curl -sS http://httpbin:8000/headers
{
  "headers": {
    "Accept": "*/*", 
    "Host": "httpbin:8000", 
    "User-Agent": "curl/8.1.2"
  }
}


Now, you should see access logging for both v1 and v2. The access logs created in v2 are the mirrored requests that are actually going to v1.

samim@ip-172-31-27-156:~/istio-1.18.1$ kubectl logs "$V1_POD" -c httpbin   # v1 ok 200
[2023-07-17 03:28:29 +0000] [1] [INFO] Starting gunicorn 19.9.0
[2023-07-17 03:28:29 +0000] [1] [INFO] Listening at: http://0.0.0.0:80 (1)
[2023-07-17 03:28:29 +0000] [1] [INFO] Using worker: sync
[2023-07-17 03:28:29 +0000] [9] [INFO] Booting worker with pid: 9
10.244.0.8 - - [17/Jul/2023:03:35:59 +0000] "GET /headers HTTP/1.1" 200 105 "-" "curl/8.1.2"



samim@ip-172-31-27-156:~/istio-1.18.1$ kubectl logs "$V2_POD" -c httpbin   # v2 ok 200
[2023-07-17 03:30:14 +0000] [1] [INFO] Starting gunicorn 19.9.0
[2023-07-17 03:30:14 +0000] [1] [INFO] Listening at: http://0.0.0.0:80 (1)
[2023-07-17 03:30:14 +0000] [1] [INFO] Using worker: sync
[2023-07-17 03:30:14 +0000] [9] [INFO] Booting worker with pid: 9
10.244.0.8 - - [17/Jul/2023:03:44:07 +0000] "GET /headers HTTP/1.1" 200 105 "-" "curl/8.1.2"

--------------------sucessfully mirriored traffic same time with v1 and v2--------------------------------------------------------------
as per need you send traffic percentage to v2.

-----------------------------------------------------------------------------------------------------------------------------------------








