Istio generates three types of telemetry to provide observability to services in the mesh:

Metrics
Distributed traces
Access logs


----------------------------------------------Metrics----------------------------------------------------------------------------
Istio generates metrics based on the four golden signals: latency, traffic, errors, and saturation.

Latency represents the time it takes to service a request. These metrics should be broken down into latency of successful requests
(e.g., HTTP 200) and failed requests (e.g., HTTP 500).

Traffic measures how much demand gets placed on the system, and itâ€™s measured in system-specific metrics.
For example, HTTP requests per second, or concurrent sessions, retrievals per second, and so on.

Errors measures the rate of failed requests (e.g., HTTP 500s).

Saturation measures how full the most constrained resources of service are. For example, utilization of a thread pool.

The metrics are collected at different levels, starting with the most granular, the Envoy proxy-level, then the service-level and control plane metrics.

------------------------------------------------Proxy-level metrics-----------------------------------------------------------------------------------

Envoy has a crucial role in generating metrics. It generates a rich set of metrics about all traffic passing through it.

Using the metrics generated by Envoy, we can monitor the mesh at the lowest granularity, for example,
metrics for individual listeners and clusters in the Envoy proxy.

-----------------------------------------------Service-level metrics----------------------------------------------------------------------
service level metrics cover the four golden signals.

Latency
Traffic
Errors
Saturation

These metrics allow us to monitor service-to-service communication. 

Istio exports the standard set of metrics to Prometheus by default.

-----------------------------------Control plane metrics--------------------------------------------------------------------------------------
Istio also emits control plane metrics that can help monitor the control plane and behavior of Istio, not user services.

The control plane metrics include the number of conflicting inbound/outbound listeners, the number of clusters without instances, 
rejected or ignored configurations, and so on.

--------------------------------------------------Prometheus---------------------------------------------------------------------------------
Prometheus is an open-source monitoring system and time series database. 

Istio uses Prometheus to record metrics that track the health of Istio and applications in the mesh.

samim@ip-172-31-27-156:~/istio-1.18.1$ kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.10/samples/addons/prometheus.yaml 
<---svc as ClusterIP to I change NodePort---------------------------------->
serviceaccount/prometheus created
configmap/prometheus created
clusterrole.rbac.authorization.k8s.io/prometheus created
clusterrolebinding.rbac.authorization.k8s.io/prometheus created
service/prometheus created
deployment.apps/prometheus created

samim@ip-172-31-27-156:~/istio-1.18.1$ getmesh istioctl dashboard prometheus
http://localhost:9090

samim@ip-172-31-27-156:~/istio-1.18.1$ k get all -n istio-system
NAME                                        READY   STATUS              RESTARTS      AGE
pod/istio-egressgateway-c7df4695c-m2998     1/1     Running             1 (10h ago)   10h
pod/istio-ingressgateway-65bc5d57f9-29qkr   1/1     Running             1 (10h ago)   10h
pod/istiod-dd8fd669c-zr2mx                  1/1     Running             1 (56m ago)   10h
pod/prometheus-67f6764db9-7bmsg             0/2     ContainerCreating   0             4s

NAME                           TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                                      AGE
service/istio-egressgateway    ClusterIP      10.102.24.35     <none>        80/TCP,443/TCP                                                               10h
service/istio-ingressgateway   LoadBalancer   10.111.35.173    <pending>     15021:30013/TCP,80:32479/TCP,443:30554/TCP,31400:30030/TCP,15443:32678/TCP   10h
service/istiod                 ClusterIP      10.96.224.103    <none>        15010/TCP,15012/TCP,443/TCP,15014/TCP                                        10h
service/prometheus             NodePort       10.111.209.247   <none>        9090:32000/TCP                                                               4s

NAME                                   READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/istio-egressgateway    1/1     1            1           10h
deployment.apps/istio-ingressgateway   1/1     1            1           10h
deployment.apps/istiod                 1/1     1            1           10h
deployment.apps/prometheus             0/1     1            0           4s

NAME                                              DESIRED   CURRENT   READY   AGE
replicaset.apps/istio-egressgateway-c7df4695c     1         1         1       10h
replicaset.apps/istio-ingressgateway-65bc5d57f9   1         1         1       10h
replicaset.apps/istiod-dd8fd669c                  1         1         1       10h
replicaset.apps/prometheus-67f6764db9             1         1         0       4s

samim@ip-172-31-27-156:~/istio-1.18.1$ k port-forward service/prometheus 32000:9090  --address 0.0.0.0 -n istio-system 
Forwarding from 0.0.0.0:32000 -> 9090

-------------------------------------------grafana------------------------------------------------------------------------------------------------
Grafana is an open platform for analytics and monitoring. Grafana can connect to various data sources and visualizes
the data using graphs, tables, heatmaps, etc. With a powerful query language, you can customize the existing dashboard and create more advanced visualizations.



samim@ip-172-31-27-156:~/istio-1.18.1$ kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.10/samples/addons/grafana.yaml
<-----------------change service ClusterIP to NodePort-------->
serviceaccount/grafana created
configmap/grafana created
service/grafana created
deployment.apps/grafana created
configmap/istio-grafana-dashboards created
configmap/istio-services-grafana-dashboards created

samim@ip-172-31-27-156:~/istio-1.18.1$ k get all -n istio-system
NAME                                        READY   STATUS              RESTARTS      AGE
pod/grafana-7bd5db55c4-rgxnj                0/1     ContainerCreating   0             6s
pod/istio-egressgateway-c7df4695c-m2998     1/1     Running             1 (10h ago)   11h
pod/istio-ingressgateway-65bc5d57f9-29qkr   1/1     Running             1 (10h ago)   11h
pod/istiod-dd8fd669c-zr2mx                  1/1     Running             1 (66m ago)   11h
pod/prometheus-67f6764db9-7bmsg             2/2     Running             0             10m

NAME                           TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                                      AGE
service/grafana                NodePort       10.111.130.18    <none>        3000:32001/TCP                                                               6s
service/istio-egressgateway    ClusterIP      10.102.24.35     <none>        80/TCP,443/TCP                                                               11h
service/istio-ingressgateway   LoadBalancer   10.111.35.173    <pending>     15021:30013/TCP,80:32479/TCP,443:30554/TCP,31400:30030/TCP,15443:32678/TCP   11h
service/istiod                 ClusterIP      10.96.224.103    <none>        15010/TCP,15012/TCP,443/TCP,15014/TCP                                        11h
service/prometheus             NodePort       10.111.209.247   <none>        9090:32000/TCP                                                               10m

NAME                                   READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/grafana                0/1     1            0           6s
deployment.apps/istio-egressgateway    1/1     1            1           11h
deployment.apps/istio-ingressgateway   1/1     1            1           11h
deployment.apps/istiod                 1/1     1            1           11h
deployment.apps/prometheus             1/1     1            1           10m

NAME                                              DESIRED   CURRENT   READY   AGE
replicaset.apps/grafana-7bd5db55c4                1         1         0       6s
replicaset.apps/istio-egressgateway-c7df4695c     1         1         1       11h
replicaset.apps/istio-ingressgateway-65bc5d57f9   1         1         1       11h
replicaset.apps/istiod-dd8fd669c                  1         1         1       11h
replicaset.apps/prometheus-67f6764db9             1         1         1       10m

$ getmesh istioctl dashboard grafana
http://localhost:3000

samim@ip-172-31-27-156:~/istio-1.18.1$ k port-forward service/grafana  32001:3000  --address 0.0.0.0 -n istio-system 
Forwarding from 0.0.0.0:32001 -> 3000


istio controlplane dashboard
istio mesh dashboard
istio performance dashboard
istio service dashboard
istio wasm extension dashboard
istio workload dashboard
---------------------------------------------distributed tracing (zipkin)-by help of forward headers-------------------------------------------------
----------------discovery latencies and performance issue---------------------------------------------------------------
Envoy generates a unique request ID and tracing information and stores it as part of HTTP headers whenever a request enters the service mesh.

Any application can then forward these headers to other services to create a full trace through the system.

A distributed trace is a collection of spans. As requests flow through different system components, each component contributes a span.
Each span has a name, start and finish timestamp, a set of key-value pairs called tags and logs, and a span context.

Istio relies on B3 trace headers (headers starting with x-b3) and the Envoy-generated request ID (x-request-id). 
The B3 headers are used for trace context propagation across service boundaries.


Here are the specific header names we need to propagate in our applications with each outgoing request:

x-request-id
x-b3-traceid
x-b3-spanid
x-b3-parentspanid
x-b3-sampled
x-b3-flags
b3


samim@ip-172-31-27-156:~/istio-1.18.1kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.10/samples/addons/extras/zipkin.yamlml
deployment.apps/zipkin created
service/tracing created
service/zipkin created

samim@ip-172-31-27-156:~/istio-1.18.1$ k get all -n istio-system
NAME                                        READY   STATUS    RESTARTS      AGE
pod/grafana-7bd5db55c4-rgxnj                1/1     Running   0             13m
pod/istio-egressgateway-c7df4695c-m2998     1/1     Running   1 (10h ago)   11h
pod/istio-ingressgateway-65bc5d57f9-29qkr   1/1     Running   1 (10h ago)   11h
pod/istiod-dd8fd669c-zr2mx                  1/1     Running   1 (80m ago)   11h
pod/prometheus-67f6764db9-7bmsg             2/2     Running   0             23m
pod/zipkin-77f89cb994-pzr7x                 1/1     Running   0             14s

NAME                           TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                                      AGE
service/grafana                NodePort       10.111.130.18    <none>        3000:32001/TCP                                                               13m
service/istio-egressgateway    ClusterIP      10.102.24.35     <none>        80/TCP,443/TCP                                                               11h
service/istio-ingressgateway   LoadBalancer   10.111.35.173    <pending>     15021:30013/TCP,80:32479/TCP,443:30554/TCP,31400:30030/TCP,15443:32678/TCP   11h
service/istiod                 ClusterIP      10.96.224.103    <none>        15010/TCP,15012/TCP,443/TCP,15014/TCP                                        11h
service/prometheus             NodePort       10.111.209.247   <none>        9090:32000/TCP                                                               23m
service/tracing                NodePort       10.107.223.153   <none>        80:32002/TCP                                                                 14s
service/zipkin                 ClusterIP      10.96.115.236    <none>        9411/TCP                                         

samim@ip-172-31-27-156:~/istio-1.18.1$ k port-forward service/tracing  32002:80  --address 0.0.0.0 -n istio-system 
Forwarding from 0.0.0.0:32002 -> 9411


$getmesh istioctl dashboard zipkin

-------------------------------------------------------------kiali-----------------------------------------------------------------------
Kiali is an observability console for Istio with service mesh configuration and validation capabilities. 

It helps you understand the structure and health of your service mesh by monitoring traffic flow to infer the topology and report errors.

Kiali provides detailed metrics and a basic Grafana integration, which can be used for advanced queries. 

Distributed tracing is provided by integration with Jaeger.

samim@ip-172-31-27-156:~/istio-1.18.1$ k get all -n istio-system
NAME                                        READY   STATUS    RESTARTS       AGE
pod/grafana-7bd5db55c4-rgxnj                1/1     Running   1 (6m3s ago)   3h16m
pod/istio-egressgateway-c7df4695c-m2998     1/1     Running   2 (6m3s ago)   14h
pod/istio-ingressgateway-65bc5d57f9-29qkr   1/1     Running   2 (6m3s ago)   14h
pod/istiod-dd8fd669c-zr2mx                  1/1     Running   2 (6m3s ago)   14h
pod/kiali-75b4b9df64-2gz85                  0/1     Running   0              5s
pod/prometheus-67f6764db9-7bmsg             2/2     Running   2 (6m3s ago)   3h26m
pod/zipkin-77f89cb994-pzr7x                 1/1     Running   1 (6m3s ago)   3h3m

NAME                           TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                                      AGE
service/grafana                NodePort       10.111.130.18    <none>        3000:32001/TCP                                                               3h16m
service/istio-egressgateway    ClusterIP      10.102.24.35     <none>        80/TCP,443/TCP                                                               14h
service/istio-ingressgateway   LoadBalancer   10.111.35.173    <pending>     15021:30013/TCP,80:32479/TCP,443:30554/TCP,31400:30030/TCP,15443:32678/TCP   14h
service/istiod                 ClusterIP      10.96.224.103    <none>        15010/TCP,15012/TCP,443/TCP,15014/TCP                                        14h
service/kiali                  NodePort       10.102.116.138   <none>        20001:32003/TCP,9090:31992/TCP                                               5s
service/prometheus             NodePort       10.111.209.247   <none>        9090:32000/TCP                                                               3h26m
service/tracing                NodePort       10.107.223.153   <none>        80:32002/TCP                                                                 3h3m
service/zipkin                 ClusterIP      10.96.115.236    <none>        9411/TCP                                                                     3h3m


samim@ip-172-31-27-156:~/istio-1.18.1$ k port-forward service/kiali 32003:20001 --address 0.0.0.0 -n istio-system
Forwarding from 0.0.0.0:32003 -> 20001
-----------------------------------------------jaeger------------------------------------------------------------------------------------------------------------


