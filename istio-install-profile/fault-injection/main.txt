-------------------------------------------fault-injection-----------------------------------------------------------------------------------
To help us with service resiliency, we can use the fault injection feature. 

We can apply the fault injection policies on HTTP traffic and specify one or more faults to inject when forwarding the destination’s request.

There are two types of fault injection. 

We can delay the requests before forwarding and emulate slow network or overloaded service,
and we can abort the HTTP request and return a specific HTTP error code to the caller. With the abort, we can simulate a faulty upstream service.

Here’s an example of aborting HTTP requests and returning HTTP 404, for 30% of the incoming requests:
----------------------------------------------------fault-injection RETUN CLIENT httpStatus: 404 OF 30% ABORT-------------------------------------------------------------------------------------------
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: details
spec:
  hosts:
  - details
  http:
  - route:
    - destination:
        host: details.default.svc.cluster.local
        subset: v1
    fault:
      abort:
        percentage:
          value: 30
        httpStatus: 404
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: details
spec:
  host: details
  subsets:
  - name: v1
    labels:
      version: v1







-------------------------my example---------------------------------------------------------------------------

---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: http-ingress-gateway
spec:
  # The selector matches the ingress gateway pod labels.
  # If you installed Istio using Helm following the standard documentation, this would be "istio=ingress"
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 8080
      name: http
      protocol: HTTP
    hosts:
      - "som.trycloud.co.in"   # domain name of external website
      - "sam.trycloud.co.in"
---    
kind: VirtualService
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: productpage-vs1
  namespace: default
spec:
  hosts:
    - "som.trycloud.co.in"     # which incoming hosts are we applying proxy rules to. so copy the value of gateway host always
    #- fleetman-webapp.default.svc.cluster.local
  gateways:
    - http-ingress-gateway
  http:
  - route:
    - destination:
        host: productpage.default.svc.cluster.local
        subset: v1
    fault:
      abort:
        percentage:
          value: 30
        httpStatus: 404
  
---
kind: VirtualService
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: productpage-vs2
  namespace: default
spec:
  hosts:
    - "sam.trycloud.co.in"     # which incoming hosts are we applying proxy rules to. so copy the value of gateway host always
    #- fleetman-webapp.default.svc.cluster.local
  gateways:
    - http-ingress-gateway
  http:
  - route:
    - destination:
        host: productpage.default.svc.cluster.local
        subset: v1
    fault:
      abort:
        percentage:
          value: 50
        httpStatus: 404
       
---
kind: DestinationRule
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: productpage-ds1
  namespace: default
spec:
  host: productpage
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
  subsets:
    - labels:
        version: v1
      name: v1
    - labels:
        version: v2
      name: v2

--------------------------------------------------------------------------------------------------------------------------------------------
If we don’t specify the percentage, the Envoy proxy will abort all requests. Note that the fault injection affects services that use that VirtualService. 
It does not affect all consumers of the service.
------------------------------------------------Similarly, we can apply an optional delay to the requests using the fixedDelay field:---------------------
-----------------------------------FAULT-INJECTION  fixedDelay: 3s ON 5% OF I/C REQUESTS------------------------------------------------------------------

apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: details
spec:
  hosts:
  - details
  http:
  - route:
    - destination:
        host: details.default.svc.cluster.local
        subset: v1
    fault:
      abort:
        percentage:
          value: 5
        fixedDelay: 3s
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: details
spec:
  host: details
  subsets:
  - name: v1
    labels:
      version: v1
-------------------------------------------------------------------------------------------------------------------------------------------
The above setting will apply 3 seconds of delay to 5% of the incoming requests.

Note that the fault injection will not trigger any retry policies we have set on the routes.

EX:
if we injected an HTTP 500 error, the retry policy configured to retry on the HTTP 500 will not be triggered.
----------------------------------------------------------------------------------------------------------------------------------------------
