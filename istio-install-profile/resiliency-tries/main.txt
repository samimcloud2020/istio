------------------------------------------------------------Resiliency------------------------------------------------------------------------------------------------
Resiliency is the ability to provide and maintain an acceptable level of service in the face of faults and challenges to regular operation.

It’s not about avoiding failures. 

It’s responding to them in such a way that there’s no downtime or data loss. 

The goal for resiliency is to return the service to a fully functioning state after a failure occurs.

A crucial element in making services available is using timeouts and retry policies when making service requests.

We can configure both on Istio’s VirtualService.

Using the timeout field, we can define a timeout for HTTP requests.

If the request takes longer than the value specified in the timeout field, 
Envoy proxy will drop the requests and mark them as timed out (return an HTTP 408 to the application).

The connections remain open unless outlier detection is triggered. 

Here’s an example of setting a timeout for a route:
--------------------------------------------------timeout---------------------------------------------------------------------------------------------------
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: http-ingress-gateway
spec:
  # The selector matches the ingress gateway pod labels.
  # If you installed Istio using Helm following the standard documentation, this would be "istio=ingress"
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 8080
      name: http
      protocol: HTTP
    hosts:
      - "som.trycloud.co.in"   # domain name of external website
      - "sam.trycloud.co.in"
---    
kind: VirtualService
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: productpage-vs1
  namespace: default
spec:
  hosts:
    - "som.trycloud.co.in"     # which incoming hosts are we applying proxy rules to. so copy the value of gateway host always
    #- fleetman-webapp.default.svc.cluster.local
  gateways:
    - http-ingress-gateway
  http:
    - route:
      - destination:
          host: productpage.default.svc.cluster.local
          subset: v1
      timeout: 10s    #10s timeout
---
kind: VirtualService
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: productpage-vs2
  namespace: default
spec:
  hosts:
    - "sam.trycloud.co.in"     # which incoming hosts are we applying proxy rules to. so copy the value of gateway host always
    #- fleetman-webapp.default.svc.cluster.local
  gateways:
    - http-ingress-gateway
  http:
    - route:
      - destination:
          host: productpage.default.svc.cluster.local
          subset: v2
      timeout: 10s   #10s timeout
       
---
kind: DestinationRule
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: productpage-ds1
  namespace: default
spec:
  host: productpage
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
  subsets:
    - labels:
        version: v1
      name: v1
    - labels:
        version: v2
      name: v2


samim@ip-172-31-27-156:~$ while true; do curl -s  http://som.trycloud.co.in:32479/productpage | grep title; echo; done; 

------------------------------------------------------------------------------retry policy-------------------------------------------------------------
In addition to timeouts, we can also configure a more granular retry policy. We can control the number of retries for a given request and the timeout per try
as well as the specific conditions we want to retry on.

Both retries and timeouts happen on the client-side. 

EX:
we can only retry the requests if the upstream server returns any 5xx response code, or retry only on gateway errors (HTTP 502, 503, or 504), 
or even specify the retriable status codes in the request headers. When Envoy retries a failed request, 
the endpoint that initially failed and caused the retry is no longer included in the load balancing pool. 

Let’s say the Kubernetes service has three endpoints (Pods), and one of them fails with a retriable error code. 
When Envoy retries the request, it won’t resend the request to the original endpoint anymore. 
Instead, it will send the request to one of the two endpoints that haven’t failed.

---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: http-ingress-gateway
spec:
  # The selector matches the ingress gateway pod labels.
  # If you installed Istio using Helm following the standard documentation, this would be "istio=ingress"
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 8080
      name: http
      protocol: HTTP
    hosts:
      - "som.trycloud.co.in"   # domain name of external website
      - "sam.trycloud.co.in"
---    
kind: VirtualService
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: productpage-vs1
  namespace: default
spec:
  hosts:
    - "som.trycloud.co.in"     # which incoming hosts are we applying proxy rules to. so copy the value of gateway host always
    #- fleetman-webapp.default.svc.cluster.local
  gateways:
    - http-ingress-gateway
  http:
    - route:
      - destination:
          host: productpage.default.svc.cluster.local
          subset: v1
      retries:
        attempts: 10
        perTryTimeout: 2s
        retryOn: connect-failure,reset
---
kind: VirtualService
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: productpage-vs2
  namespace: default
spec:
  hosts:
    - "sam.trycloud.co.in"     # which incoming hosts are we applying proxy rules to. so copy the value of gateway host always
    #- fleetman-webapp.default.svc.cluster.local
  gateways:
    - http-ingress-gateway
  http:
    - route:
      - destination:
          host: productpage.default.svc.cluster.local
          subset: v2
      retries:
        attempts: 10
        perTryTimeout: 2s
        retryOn: connect-failure,reset
       
---
kind: DestinationRule
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: productpage-ds1
  namespace: default
spec:
  host: productpage
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
  subsets:
    - labels:
        version: v1
      name: v1
    - labels:
        version: v2
      name: v2


grafana------> data source from-----> set http://<prometheus ip>:<port>

then see istio dashboard in grafana.

samim@ip-172-31-27-156:~$ while true; do curl -I -s  http://som.trycloud.co.in:32479/productpage | grep Service; echo; done; 
HTTP/1.1 503 Service Unavailable



The above retry policy will attempt to retry any request that fails with a connect timeout (connect-failure) or if the server does not respond at all (reset). 

We set the per-try attempt timeout to 2 seconds and the number of attempts to 10. Note that if we set both retries and timeouts, 
the timeout value will be the maximum the request will wait.

If we had a 10-second timeout specified in the above example, we would only ever wait 10 seconds maximum, 
even if there are still attempts left in the retry policy.
--------------------------------------------------------timeout design--------------------------------------------------------------------------------------
The Timeout Design Pattern states that you should not wait for a service response for an indefinite amount of time — you should rather throw an exception instead of waiting for too long. This will ensure that you are not stuck in a limbo state while continuing to consume application resources.

Service calls made over the network might fail. There can be congestion in the network or a power failure impacting your systems. The request might reach the destination service but it might fail to send the response back to the primary service. The data might get corrupted or lost during transmission over the wire. While architecting distributed cloud applications, you should assume that these types of network failures will happen and design your applications for resiliency. Implementing a timeout strategy ensures that your microservices are resilient and available.

By default, the timeout for HTTP requests is disabled, but it can be overridden by using a routing rule.

---------------------------------------------------timeout default design----------------------------------------------------------------

Timeout per try always 3s (including initial call), but the total timeout for all attempts is 8s.

It basically means that:------------>

An attempt is marked as failed if it takes longer than 3 seconds.

There are going to be a maximum of 3 attempts.

The overall waiting time for a successful attempt will not be longer than 8 seconds.

perTryTimeout * retries should not exceed the global timeout. If it does, the retry attempts that fall outside the global timeout will be ignored.
---------------------------------------------------------------------------------------------------------------------------------------------
